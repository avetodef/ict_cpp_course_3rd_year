Задание 1. Передача массива в функцию
Реализуйте созданный вами функционал в упражнениях 1 и 2 в виде
соответствующих функций, которые будут принимать массив и возвращать
требуемые результаты.
Функция должна принимать два параметра: целочисленное значение – размер
массива и сам массив.
Задание 2. Возврат массива из функции
➢ В качестве результата работы функции может быть указатель на массив, создаваемый
в этой функции.
Дано: в функции main() объявлены два массива равного размера.
Требуется: изучите содержимое функции main() и реализуйте функцию
max_vect() согласно сценария функции main(), так чтобы она возвращала адрес
на созданный ею массив с элементами – большими значениями на
соответствующих индексах исходных массивов, например, для заданных массивов
результирующий массив должен быть равен 7, 6, 5, 4, 5, 6, 7, 3.
Таким образом, в результате вызова функции max_vect(kc,a,b) возвращается
массив, состоящий из больших элементов, стоящих на соответствующих местах в
исходных массивах.
int main()
{
int a[]={1,2,3,4,5,6,7,2};
int b[]={7,6,5,4,3,2,1,3};
int kc = sizeof(a)/sizeof(a[0]); //Количество элементов массива
int *c; //Указатель на результирующий массив
c = max_vect(kc,a,b); //вызов функции для создания массива
for (int i = 0;i < kc; i++) //Вывод результата.
cout << c[i] << " ";
cout << endl;
delete []c; //Возврат памяти.
}

35

Задание 3. Реализация алгоритмов поиска методом транспозиции
Последовательный поиск предполагает последовательный просмотр всех
записей множества, организованного как массив. Улучшением рассмотренного
метода является метод транспозиции: каждый запрос к записи сопровождается
сменой мест этой и предшествующий записи. В итоге наиболее часто
используемые записи постепенно перемещаются в начало массива и при
последующем обращении к ним они находятся значительно быстрее.
Реализуйте функцию поиска в массиве заданной размерности конкретного
элемента (key) с использованием алгоритма транспозиции.
Задание 4. Передача параметров в программу
Требуется написать программу, которая, принимая в качестве параметров два
целочисленного операнда, возвращала бы их сумму или произведение в
зависимости от дополнительного параметра-флага, например, вызов
nameProg –a 12 45
возвращал бы результат суммирования, а вызов
nameProg –m 12 45
возвращал бы результат произведения.
Указание: требуется реализовать проверки вводимых данных:
• по количеству параметров – если количество переданных функции
аргументов argc меньше четырёх (в качестве первого аргумента
выступает имя программы),
• по формату – если второй элемент массива параметров argv[] не равен
строке -a или -m.
Рекомендация: сравнение удобно проводить при помощи функции strncmp() из
библиотеки <cstring>, которая имеет следующий синтаксис:
int strncmp(const char *str1, const char str2, size_t count)
Функция производит лексикографическое сравнение первых count символов
строк str1 и str2 и возвращает 0, если строки равны, значение меньше нуля, если
str1 меньше str2, и значение больше нуля — в противном случае.
Для конвертации строки в целое число можно применить функцию atoi:
int atoi(const char* str)
Передаваемая строка должна содержать корректную запись целого числа, в
противном случае возвращается нуль.